@page "/Assignments/"
@using WebApp.Client.Components
@using WebApp.Client.Services
@using System.Security.Claims
@using System.Text
@using Newtonsoft.Json
@using WebApp.Shared.Dto
@inject HttpClient HttpClient
@inject AssignmentService AssignmentService
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<PageTitle>Zadania</PageTitle>

<style>
.center {
  margin: auto;
}
img {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
table, th, td {
  border:1px solid black;
}
</style>

<AuthorizeView Context="authContext">
    <Authorized>
        <style>
            body { background: white !important; }
        </style>
        <div style="text-align: center;">
            <h1>Zadania Projektu @idp</h1>
            @if (state != null && state.User.IsInRole("admin"))
                        {
                            <button type="submit" id="submit" class="button mainaction submit btn btn-primary btn-lg text-uppercase w-30" @onclick="() => AddDialog.Open()">Kliknij, aby dodać nowe zadanie</button>
                            
                            <ModalDialog @ref="AddDialog" Title="Dodawanie Zadania">
                                <div class="row">
                                    <EditForm  Model="@asgn" EditContext="@editContext" >
                                        <DataAnnotationsValidator />
                                        
                                        <div class="form-group">
                                            <InputText @bind-Value="asgn.Name" class="form-control" placeholder="Nazwa Zadania" />
                                            <ValidationMessage For="@(() => asgn.Name)" />
                                        </div>
                                        
                                        <div class="form-group">
                                            <InputText @bind-Value="asgn.Description" class="form-control" placeholder="Opis" />
                                            <ValidationMessage For="@(() => asgn.Description)" />
                                        </div>
                                        <div >
                                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="asgn.DeadlineDateTime" class="form-control" />
                                            <ValidationMessage For="@(() => asgn.DeadlineDateTime)" />
                                        </div>                            
                                        <br />
                                        <p class="formbuttons"><button type="submit" id="submit" class="button mainaction submit btn btn-primary btn-lg w-40"
                                                                       @onclick="Send">Dodaj</button><button class="button mainaction btn btn-secondary btn-lg w-40"  @onclick="() => AddDialog.Close()">Zamknij</button></p>
                                        <br />
                                    </EditForm>
                                </div>
                            </ModalDialog>
                            
                            <ModalDialog @ref="EditDialog" Title="Edycja Zadania">
                                <div class="row">
                                    <EditForm Model="@asgn" EditContext="@editContext">
                                        <DataAnnotationsValidator />
                                        
                                        <div class="form-group">
                                            <InputText @bind-Value="asgn.Name" class="form-control" placeholder="Nazwa Zadania" />
                                            <ValidationMessage For="@(() => asgn.Name)" />
                                        </div>
                                        
                                        <div class="form-group">
                                            <InputText @bind-Value="asgn.Description" class="form-control" placeholder="Opis" />
                                            <ValidationMessage For="@(() => asgn.Description)" />
                                        </div>
                                        <div >
                                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="asgn.DeadlineDateTime" class="form-control" />
                                            <ValidationMessage For="@(() => asgn.DeadlineDateTime)" />
                                        </div>                            
                                        <br />
                                        <p class="formbuttons"><button type="submit" id="submit" class="button mainaction submit btn btn-primary btn-lg w-40"
                                                                       @onclick="EditDialog.Close">Zatwierdź zmiany</button><button class="button mainaction btn btn-secondary btn-lg w-40"  
                                                                                                                                    @onclick="() => EditDialog.Close()">Zamknij</button></p>
                                        <br />
                                    </EditForm>
                                </div>
                            </ModalDialog>
                        }
        </div>
        <br/>
        <table style="width:100%">
            <tr>
                <th style="text-align: center;">Nazwa Zadania</th>
                <th style="text-align: center;">Opis Zadania</th>
                <th style="text-align: center;">Data Zwrotu</th>
                <th style="text-align: center;"></th>
            </tr>
            @if (assignments != null)
                @foreach (var assignment in assignments)
            {
                <tr>
                    <td>@assignment.Name</td><td>@assignment.Description</td><td>@assignment.DeadlineDateTime</td>
                    @if (state != null && state.User.IsInRole("admin"))
                    {
                        <td> <button class="button btn btn-primary btn-lg w-100" @onclick="() => EditDialog.Open()">Zarządzaj</button> </td>
                    }
                </tr>
            }
        </table>
            <NavLink href="chat">
                <button class="button btn btn-primary btn-lg">Czat</button>
            </NavLink>        
    </Authorized>
    <NotAuthorized>
        @code
        {
            protected override void OnInitialized()
            {
                //NavManager.NavigateTo("/");
            }
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private ModalDialog AddDialog { get; set; }
    private ModalDialog EditDialog { get; set; }
    public string userName = "";
    AuthenticationState? state = null;
    
    int idp = -1;
    public string data = "";
    AssignmentDto asgn = new AssignmentDto();
    public List<AssignmentDto> assignments;
    private EditContext? editContext;
    
    protected override async Task OnInitializedAsync()
    {
        state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!state.User.Claims.Any())
        {
            return;
        }

        //assignments = await AssignmentService.GetAssignmentsAsync();
        
    }

    async Task Send()
    {
        if (asgn.Name != "")
        {
            //await AssignmentService.AddAssignment(asgn);
            AddDialog.Close();
        }

        if (asgn.Name == "")
        {
            throw new Exception("Zadanie musi mieć nazwę.");
        }

    }
}