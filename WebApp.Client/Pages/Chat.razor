@page "/Chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.LocalStorage
@using WebApp.Client.Components
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
<PageTitle>Chat</PageTitle>
<!-- <ChatSidebar @ref=ChatSidebar></ChatSidebar> -->
<style>
    .inputText
    {
        max-width: 9rem;
    }
</style>
<div class="sidebar">
    <div style="margin-left: 0.33rem; margin-top: 0.33rem">
        <div class="@(IsInARoom ? "hidden" : string.Empty)">
            <button @onclick="() => CreateRoom(NewRoomName)">Utwórz pokój</button><br/>
            <InputText class="inputText" @bind-Value="NewRoomName"></InputText>
        </div>
        <div class="@(IsInARoom ? string.Empty : "hidden")">
            <button @onclick="() => LeaveRoom()">Opóść pokój</button>
        </div>

        <br/>
    </div>
    <div style="margin-left: 0.33rem">
        <button @onclick="ToggleRooms">Lista pokojów</button>
        <br/>
        <div class="@(RoomListHidden ? "hidden" : string.Empty)">
            <ul>
                @foreach (var room in _rooms)
                {
                    <li class="roomNames">
                        <button @onclick="() => ClickOnRoom(room.Value)">-></button>
                        @room.Value.Name
                    </li>
                }
            </ul>
        </div>
    </div>

    <!-- <div>
        <button @onclick="ToggleRoomInfo">Room information</button>
        <br/>
        <div class="@(CurrentChatInfoHidden ? "hidden" : string.Empty)">
            current room stuff
        </div>
    </div> -->

</div>
<div class="main">

    <div class="@(IsInARoom ? string.Empty : "hidden")">
        <p>Obecny pokój: @currentRoom?.Name</p>
        <br/>
        <InputText @bind-Value="MessageToSend"></InputText>
        <button @onclick="SendMessage">Wyślij wiadomość</button>
    </div>

    <br/>
    Wiadomości:
    <ul>
        @foreach (var message in _messages)
        {
            <li><p>@message</p></li>
        }
    </ul>
</div>

@code{


    public class RoomDto(string roomId, string name)
    {
        public string RoomId { get; } = roomId;
        public string Name { get; } = name;
    }
    
    public string MessageToSend = "";
    public string NewRoomName = "";
    public RoomDto? currentRoom = null;

    private HubConnection? _hubConnection;
    private readonly List<string> _messages = new();
    protected override async Task OnInitializedAsync()
    {
        var uri =NavigationManager.BaseUri;
        var accessToken = await LocalStorage.GetItemAsync<string>("accessToken");
        if (string.IsNullOrWhiteSpace(accessToken))
        {
            NavigationManager.NavigateTo("login");
        }
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(uri+"api/chat", o => o.AccessTokenProvider = () => Task.FromResult<string?>(accessToken))
            .Build();
        _hubConnection.On<string>("ReceiveInitialMessage", message =>
        {
            _messages.Add(message);
            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<string,string,string>("ReceiveMessage", (message,senderName,room) =>
        {
            _messages.Add($"[{senderName}] {message}");
            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<string>("UserConnectedToRoom", (userName) =>
        {
            _messages.Add($"{userName} dołączył do pokoju!");
            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<string>("ReceiveNotification", (notification) =>
        {
            _messages.Add($"Informacja: {notification}");
        });
        _hubConnection.On<string, string>("ReceiveNewRoomCreated", (roomId, name) =>
        {
            var room = new RoomDto(roomId, name);
            AddRoomToList(room);
        });
        _hubConnection.On<List<RoomDto>>("ReceiveAllRooms", (rooms) =>
        {
            AddAllRoomsToList(rooms);

            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<string>("ReceiveRoomRemoved", (roomId) =>
        {
            RemoveRoomFromList(roomId);
        });
        _hubConnection.On<RoomDto>("ReceiveRoomCreatedConfirmation", (room) =>
        {
            currentRoom = room;
            IsInARoom = true;
            _messages.Clear();
            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<RoomDto>("ReceiveRoomJoinedRoomConfirmation", (room) =>
        {
            currentRoom = room;
            IsInARoom = true;
            _messages.Clear();
            InvokeAsync(StateHasChanged);
        });
        //_hubConnection.On<RoomDto>("ReceiveRoomLeftRoomConfirmation", (room) =>
        //{
        //    currentRoom = room;
        //    CreateNewRoomHidden = true;
        //    InvokeAsync(StateHasChanged);
        //});
        await _hubConnection.StartAsync();
    }

    async Task SendMessage()
    {
        if(currentRoom == null) return;
        if (string.IsNullOrWhiteSpace(MessageToSend))
        {
            return;
        }
        await _hubConnection!.SendAsync("SendMessage", MessageToSend, currentRoom.RoomId);
        
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    public async Task CreateRoom(string name)
    {
        await _hubConnection!.SendAsync("CreateRoom",name);
    }

    public async Task JoinRoom(string roomId)
    {
        if (currentRoom is null || !currentRoom.RoomId.Equals(roomId))
        {
            await _hubConnection!.SendAsync("JoinRoom", roomId);
        }

    }

    public async Task LeaveRoom()
    {
        await _hubConnection!.SendAsync("LeaveRoom", currentRoom!.RoomId);
        currentRoom = null;
        IsInARoom = false;
    }
    

    /*
     *
     * Sidebar
     *
     * 
     */
    
    public bool RoomListHidden = false;
    public bool CurrentChatInfoHidden = true;
    public bool IsInARoom = false;

    Dictionary<string, RoomDto> _rooms = new Dictionary<string, Chat.RoomDto>();
    //public RoomDto? SelectedRoom = null;
    public void AddAllRoomsToList(List<RoomDto> rooms)
    {
        _rooms.Clear();
        foreach(var room in rooms)
        {
            _rooms.TryAdd(room.RoomId, room);
        }
    }
    public void AddRoomToList(RoomDto room)
    {
        _rooms.TryAdd(room.RoomId,room);
        InvokeAsync(StateHasChanged);
    }

    public void RemoveRoomFromList(string roomId)
    {
        _rooms.Remove(roomId);
        InvokeAsync(StateHasChanged);
    }

    private async Task ClickOnRoom(RoomDto room)
    {
        await JoinRoom(room.RoomId);
        //SelectedRoom = room;
    }
    
    private void ToggleRooms()
    {
        RoomListHidden = !RoomListHidden;
    }

    private void ToggleRoomInfo()
    {
        CurrentChatInfoHidden = !CurrentChatInfoHidden;
    }
}