@page "/"
@using Newtonsoft.Json
@inject HttpClient HttpClient
@inject ProjectService ProjectService
@inject AuthenticationStateProvider StateProvider
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<style>
.center {
  margin: auto;
}
img {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
</style>

    <AuthorizeView>
        <Authorized>
            
            <style>
                    body { background: white !important; }
                </style>
                <div style="text-align: center;">
                    <h1>Projekty</h1>
                    @if (admin)
                    {
                        <button type="submit" id="submit" class="button mainaction submit btn btn-primary btn-lg text-uppercase w-30" @onclick="() => ModalDialog.Open()">Kliknij, aby dodać nowy projekt</button>
                        <ModalDialog @ref="ModalDialog" Title="Hello World">
                            <div class="row">
                                <h3>Lorem Ipsum</h3>
                                <hr>
                                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vel ultricies sapien. Duis nec nunc erat. Vivamus eget sem tristique, lacinia mi id, cursus eros.</p>
                                <button class="btn btn-primary"  @onclick="() => ModalDialog.Close()">Close</button>
                            </div>
                        </ModalDialog>
                    }
                </div>
            
            @foreach (var x in @context.User.Claims)
            {
                <p>@x.Type @x.Value</p>
            }
            
            <p>Token: @accessToken</p>
        </Authorized>
        <NotAuthorized>
                <style>
                    body { background: red !important; }
                </style>
                <div class="center">
                    <img src="/Res/sotp.png" id="sotp" width="90%" height="90%">
                </div>
        </NotAuthorized>
    </AuthorizeView>

@data

@code{
    
    bool admin = true;
    
    private ModalDialog ModalDialog { get; set; }
    
    string data = "";
    string accessToken = "";
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask {get; set;}
    protected override async Task OnInitializedAsync()
    {

        var state = await authStateTask;
        foreach (var x in state.User.Claims)
        {
            Console.WriteLine($"{x.Type} {x.Value}");
        }

        if (state.User.Claims.Any())
        {
            string key = "Microsoft.AspNetCore.Components.WebAssembly.Authentication.CachedAuthSettings";
            string authSettingsRAW = await JS.InvokeAsync<string>("sessionStorage.getItem", key);
            var authSettings = JsonConvert.DeserializeObject<CachedAuthSettings>(authSettingsRAW);
            string userRAW = await JS.InvokeAsync<string>("sessionStorage.getItem", authSettings?.OIDCUserKey);
            var user = JsonConvert.DeserializeObject<OIDCUser>(userRAW);
            Console.WriteLine(user.id_token);
        }
        

    }
    
    public class CachedAuthSettings
    {
        public string authority { get; set; }
        public string metadataUrl { get; set; }
        public string client_id { get; set; }
        public string[] defaultScopes { get; set; }
        public string redirect_uri { get; set; }
        public string post_logout_redirect_uri { get; set; }
        public string response_type { get; set; }
        public string response_mode { get; set; }
        public string scope { get; set; }

        public string OIDCUserKey => $"oidc.user:{authority}:{client_id}";
    }

    public class OIDCUser
    {
        public string id_token { get; set; }
        public string access_token { get; set; }
        public string refresh_token { get; set; }
        public string token_type { get; set; }
        public string scope { get; set; }
        public int expires_at { get; set; }
    }

}