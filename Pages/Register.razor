@page "/Register"
@using WebAppSzczegielniak.Data
@using WebAppSzczegielniak.Services
@inject UserService userService

<PageTitle>Rejestracja nowego użytkownika</PageTitle>
@*<h3>Rejestracja nowego użytkownika</h3>*@

<head>
<style>
.center {
  margin: auto;
  width: 30%;
}
img {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
</style>
</head>
<body>
    <div class="center">
    
    <img src="/Res/krater.png" id="logo" alt="Gąsienica paląca papierosa" width="200px" height="267px">
<EditForm Model="@user" OnValidSubmit="@RegisterUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <InputText @bind-Value="user.username" class="form-control" placeholder="Nazwa Użytkownika" />
        <ValidationMessage For="@(() => user.username)" />
    </div>

    <div class="form-group">
        <InputText @bind-Value="user.password" type="password" class="form-control" placeholder="Hasło" />
        <ValidationMessage For="@(() => user.password)" />
    </div>

    <div class="form-group">
        <InputText @bind-Value="confirmPassword" type="password" class="form-control" placeholder="Powtórz hasło" />
    </div>

    <br />
    
     <p class="formbuttons"><button type="submit" id="submit" class="button mainaction submit btn btn-primary btn-lg text-uppercase w-100">Zarejestruj</button>
    </p>
    <br />

    @if (registrationStatus != RegistrationStatus.None)
    {
        <div class="alert @statusClass" role="alert">
            @registrationMessage
        </div>
    }
</EditForm>
</div>
</body>

@code {
    private User user = new User();
    private string confirmPassword;
    private RegistrationStatus registrationStatus = RegistrationStatus.None;
    private string registrationMessage = "";
    private string statusClass = "";

    private async Task RegisterUser()
    {
        if (user.password != confirmPassword)
        {
            registrationStatus = RegistrationStatus.Error;
            registrationMessage = "Podane hasła nie są identyczne.";
            statusClass = "alert-danger";
            return;
        }

        if (userService.IsUsernameTaken(user.username))
        {
            registrationStatus = RegistrationStatus.Error;
            registrationMessage = "Nazwa użytkownika jest już zajęta.";
            statusClass = "alert-danger";
            return;
        }

        await userService.RegisterUser(user);

        registrationStatus = RegistrationStatus.Success;
        registrationMessage = "Rejestracja zakończona sukcesem!";
        statusClass = "alert-success";
    }

    public enum RegistrationStatus
    {
        None,
        Success,
        Error
    }
}
